return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if (!is.na(newMin) & newMin < minDist)
{
minDist = newMin
clust = i
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
actual
error
targetPlayer = validPlayers[2]
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
targetPlayer = validPlayers[2]
currentAge = 25
targetAge = 26
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
actual
error
#subsequent years
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if (!is.na(newMin) && newMin < minDist)
{
minDist = newMin
clust = i
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
targetPlayer = validPlayers[2]
currentAge = 25
targetAge = 26
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
actual
error
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if ((!is.na(newMin)) && (newMin < minDist)
{
minDist = newMin
clust = i
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if ((!is.na(newMin)) && (newMin < minDist))
{
minDist = newMin
clust = i
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
OPS[playerID == targetPlayer & age == currentAge]
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS) | is.na(targetPlayersOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if (!is.na(newMin))
{
if (newMin < minDist)
{
minDist = newMin
clust = i
}
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS) | is.na(targetPlayerOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if (!is.na(newMin))
{
if (newMin < minDist)
{
minDist = newMin
clust = i
}
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS)) return(NA)
if (is.na(targetPlayerOPS)) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if (!is.na(newMin))
{
if (newMin < minDist)
{
minDist = newMin
clust = i
}
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
is.na(OPS[playerID == targetPlayer & age == currentAge])
is.null(OPS[playerID == targetPlayer & age == currentAge])
OPS[playerID == targetPlayer & age == currentAge]
identical(OPS[playerID == targetPlayer & age == currentAge], numeric(0))
PredictPerformanceFromDiff = function(targetPlayerAge, targetPlayerOPS, predictionAge)
{
if (is.null(targetPlayerOPS)) return(NA)
if (identical(targetPlayerOPS, numeric(0))) return(NA)
clust = 0
minDist = 100
i = 0
for (clusterAVG in list(cluster1AVG, cluster2AVG, cluster3AVG, cluster4AVG, cluster5AVG))
{
newMin = abs(clusterAVG[targetPlayerAge-startAge + 1] - targetPlayerOPS)
i = i+1
if (!is.na(newMin))
{
if (newMin < minDist)
{
minDist = newMin
clust = i
}
}
}
if (clust == 1) diff = diff1
if (clust == 2) diff = diff2
if (clust == 3) diff = diff3
if (clust == 4) diff = diff4
if (clust == 5) diff = diff5
currentOPS = targetPlayerOPS
numYears = predictionAge - targetPlayerAge
while (numYears > 0)
{
currentOPS = currentOPS + diff[targetPlayerAge - startAge + 1]
numYears = numYears - 1
targetPlayerAge = targetPlayerAge + 1
}
return(currentOPS)
}
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
pred
currentAge = 24
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
targetPlayer = validPlayers[2]
currentAge = 24
targetAge = 26
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
actual
error
identical(OPS[playerID == targetPlayer & age == currentAge], numeric(0))
targetPlayer = validPlayers[2]
currentAge = 26
targetAge = 27
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
actual
error
targetPlayer = validPlayers[2]
currentAge = 27
targetAge = 28
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
error = (pred - actual)/actual
pred
actual
error
ComputeErrorForDiff = function(predicitonDistance = 1)
{
errorList = c()
for (targetPlayer in validPlayers)
{
for (currentAge in startAge:endAge)
{
targetAge = currentAge + predicitonDistance
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
errorList = c(errorList,(pred - actual)/actual)
}
}
return(mean(errorList), na.rm = TRUE)
}
error1 = ComputerErrorForDiff()
error1
ComputeErrorForDiff = function(predicitonDistance = 1)
{
errorList = c()
for (targetPlayer in validPlayers)
{
for (currentAge in startAge:endAge)
{
targetAge = currentAge + predicitonDistance
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
errorList = c(errorList,(pred - actual)/actual)
}
}
return(mean(errorList), na.rm = TRUE)
}
error1 = ComputeErrorForDiff()
error1
ComputeErrorForDiff = function(predicitonDistance = 1)
{
errorList = c()
for (targetPlayer in validPlayers)
{
for (currentAge in startAge:endAge)
{
targetAge = currentAge + predicitonDistance
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
errorList = c(errorList,(pred - actual)/actual)
}
}
return(mean(errorList, na.rm = TRUE))
}
error1 = ComputeErrorForDiff()
error1
warnings()
error2 = ComputeErrorForDiff(2)
error2
error3 = ComputeErrorForDiff(3)
error3
error4 = ComputeErrorForDiff(4)
error4
error1 = ComputeErrorForDiff(1)
meanError = mean(error1, na.rm = TRUE)
minError = min(error1, na.rm = TRUE)
maxError = max(error1, na.rm = TRUE)
meanError
minError
maxError
#error (prediciton distance is number of years to predict into future)
ComputeErrorForDiff = function(predicitonDistance = 1)
{
errorList = c()
for (targetPlayer in validPlayers)
{
for (currentAge in startAge:endAge)
{
targetAge = currentAge + predicitonDistance
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
errorList = c(errorList,(pred - actual)/actual)
}
}
return(errorList)
}
error1 = ComputeErrorForDiff(1)
meanError = mean(error1, na.rm = TRUE)
minError = min(error1, na.rm = TRUE)
maxError = max(error1, na.rm = TRUE)
meanError
minError
maxError
ComputeErrorForDiff = function(predicitonDistance = 1)
{
errorList = c()
for (targetPlayer in validPlayers)
{
for (currentAge in startAge:endAge)
{
targetAge = currentAge + predicitonDistance
pred = PredictPerformanceFromDiff(currentAge, OPS[playerID == targetPlayer & age == currentAge], targetAge)
actual = OPS[playerID == targetPlayer & age == targetAge]
errorList = c(errorList,abs((pred - actual)/actual))
}
}
return(errorList)
}
error1 = ComputeErrorForDiff(1)
error = error1
meanError = mean(error, na.rm = TRUE)
minError = min(error, na.rm = TRUE)
maxError = max(error, na.rm = TRUE)
meanError
minError
maxError
error2 = ComputeErrorForDiff(2)
error3 = ComputeErrorForDiff(3)
error4 = ComputeErrorForDiff(4)
error = error2
meanError = mean(error, na.rm = TRUE)
minError = min(error, na.rm = TRUE)
maxError = max(error, na.rm = TRUE)
meanError
minError
maxError
error = error3
meanError = mean(error, na.rm = TRUE)
minError = min(error, na.rm = TRUE)
maxError = max(error, na.rm = TRUE)
meanError
minError
maxError
error = error4
meanError = mean(error, na.rm = TRUE)
minError = min(error, na.rm = TRUE)
maxError = max(error, na.rm = TRUE)
meanError
minError
maxError
meanError = mean(error1, na.rm = TRUE)
meanError
maxError = max(error1, na.rm = TRUE)
maxError
meanError = mean(error2, na.rm = TRUE)
meanError
maxError = max(error2, na.rm = TRUE)
maxError
meanError = mean(error3, na.rm = TRUE)
meanError
maxError = max(error3, na.rm = TRUE)
maxError
meanError = mean(error4, na.rm = TRUE)
meanError
maxError = max(error4, na.rm = TRUE)
maxError
error5 = ComputeErrorForDiff(5)
error6 = ComputeErrorForDiff(6)
error7 = ComputeErrorForDiff(7)
error8 = ComputeErrorForDiff(8)
error9 = ComputeErrorForDiff(9)
meanError = mean(error5, na.rm = TRUE)
meanError
maxError = max(error5, na.rm = TRUE)
maxError
meanError = mean(error6, na.rm = TRUE)
meanError
maxError = max(error6, na.rm = TRUE)
maxError
meanError = mean(error7, na.rm = TRUE)
meanError
maxError = max(error7, na.rm = TRUE)
maxError
meanError = mean(error8, na.rm = TRUE)
meanError
maxError = max(error8, na.rm = TRUE)
maxError
meanError = mean(error9, na.rm = TRUE)
meanError
maxError = max(error9, na.rm = TRUE)
maxError
